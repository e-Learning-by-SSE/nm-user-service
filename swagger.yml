openapi: 3.0.3
info:
  title: User Service
  description: User Service using Flask, OpenAPI and Connexion
  version: "1.0.0"
servers:
  - url: http://localhost:8000
    description: Rest Server showing Swagger and Connexion capability
paths:
  /user:
    get:
      operationId: user.getAll
      tags:
        - User
      summary: Returns a list of users.
      description: Returns a list of users.
      responses:
        "200": # status code
          description: Return the entire list of users.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    post:
      operationId: user.create
      tags:
        - User
      summary: Create a new user
      description: Create a new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: user Created successfully
  /user/{id}:
    get:
      operationId: user.get
      tags:
        - User
      summary: Return an user with given ID
      description: Return an user with given ID
      parameters:
        - name: id
          in: path
          description: user ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200": # status code
          description: Return an user with given ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    delete:
      operationId: user.delete
      tags:
        - User
      summary: Delete an user with given ID
      description: Delete an user with given ID
      parameters:
        - name: id
          in: path
          description: user ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200": # status code
          description: Deleted an user with given ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    put:
      operationId: user.update
      tags:
        - User
      summary: Update an user with given ID
      description: Update an user with given ID
      parameters:
        - name: id
          in: path
          description: user ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200": # status code
          description: Updated an user with given ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        skill_id: 
          type: integer
          format: int64    
        learningProfile_id:
          type: integer
          format: int64    